export default Link;
export type Response = import("../types/apiResponses").linksResponse;
/**
 * @typedef { import("../types/apiResponses").linksResponse } Response
 */
/**
 * A Link is a set of credentials associated to a end-user access to an Institution.
 * @extends Resource<Response>
 * */
declare class Link extends Resource<import("../types/apiResponses").linksResponse> {
    /**
     * @constant {string}
     * @static
     * */
    static SINGLE: string;
    /**
     * @constant {string}
     * @static
     */
    static RECURRENT: string;
    constructor(session: any);
    /**
     * Register a new link.
     * @async
     * @param {string} institution - Institution's code.
     * @param {string} username - Username used to sign in online by the end-user.
     * @param {string} password - Password used to sign in online by the end-user.
     * @param {object} [options] - Optional parameters
     *   (`token`, `usernameType`, `username2`, `username3`, `password2`, `accessMode`,
     *    `certificate`, `privateKey`, `externalId`).
     * @param {string} [options.token] - The OTP token generated by the bank to log in.
     * @param {string} [options.usernameType] - Type of document to be used as a username.
     * @param {string} [options.username2] - The end-user's second username used to log in to the institution.
     * @param {string} [options.username3] - The end-user's third username used to log in to the institution.
     * @param {string} [options.password2] - The end-user's second password used to log in to the institution.
     * @param {string} [options.accessMode] - The type of link to create.
     * @param {string} [options.certificate] - For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.
     * @param {string} [options.privateKey] - For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.
     * @param {string} [options.externalId] - An additional identifier for the link, provided by you, to store in the Belvo database.
     * @returns {Promise<Response>} Newly created link.
     * @throws {RequestError}
     */
    register(institution: string, username: string, password: string, options?: {
        token?: string;
        usernameType?: string;
        username2?: string;
        username3?: string;
        password2?: string;
        accessMode?: string;
        certificate?: string;
        privateKey?: string;
        externalId?: string;
    }): Promise<Response>;
    /**
     * Update link's password and password2.
     * Use this function when you want to update the link credentials.
     * Only updating passwords is available.
     * @async
     * @param {string} id - UUID4 representation of the link Id.
     * @param {string} password - New password.
     * @param {object} options - Optional parameters
     *  (token, password2, usernameType, certificate, privateKey).
     * @param {string} [options.token] - The OTP token generated by the bank to log in.
     * @param {string} [options.usernameType] - Type of document to be used as a username.
     * @param {string} [options.password2] - The end-user's second password used to log in to the institution.
     * @param {string} [options.certificate] - For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.
     * @param {string} [options.privateKey] - For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.
     * @returns {Promise<Response>} Response
     * @throws {RequestError}
     */
    update(id: string, options?: {
        token?: string;
        usernameType?: string;
        password2?: string;
        certificate?: string;
        privateKey?: string;
    }): Promise<Response>;
    /**
     * Request scoped tokens to operate with a single link
     * @async
     * @param {string} id - UUID4 representation of the link Id.
     * @param {string} scopes - List of comma separated scopes
     * @returns {Promise<object>} Response
     * @throws {RequestError}
     */
    token(id: string, scopes: string): Promise<object>;
    #private;
}
import Resource from "./resources";
