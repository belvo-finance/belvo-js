import Resource from './resources';

/**
 * @typedef { import("../types/apiResponses").taxReturnsResponse } Response
 */

/**
 * Retrieve tax returns information from a specific fiscal link.
 * @extends Resource<Response>
 */
class TaxReturn extends Resource {
  #endpoint = 'api/tax-returns/'

  /**
 * @constant {string}
 * @static
 * */
  static YEARLY = 'yearly';

  /**
   * @constant {string}
   * @static
   */
  static MONTHLY = 'monthly';

  /* eslint-disable class-methods-use-this */
  /** @private */
  resume() { }

  /**
   * Retrieve tax returns information from a specific fiscal link.
   *
   * @async
   * @param {string} link - UUID4 representation of a `link` Id.
   * @param {string} yearFrom - Required year from, format is `YYYY-MM-DD`
   * @param {string} yearTo - Required year to, format is `YYYY-MM-DD`.
   * @param {object} [options] - Optional parameters (`token`, `saveData`, `attachPDF`)
   * @param {string} [options.token] - The OTP token generated by the bank.
   * @param {boolean} [options.saveData] - Indicates whether or not to persist the data in Belvo.
   * @param {boolean} [options.attachPDF] - If `true`, you will receive the PDF as a binary string.
   * @param {string} [options.type] - It can be `yearly` (default) or `monthly`
   * @returns {Promise<Response>} Response
   * @throws {RequestError}
   */
  async retrieve(link, yearDateFrom, yearDateTo, options = {}) {
    const {
      token, saveData, attachPDF, type,
    } = options;

    const data = {
      link,
      token,
      save_data: saveData,
      attach_pdf: attachPDF,
      type,
    };

    if (type === TaxReturn.MONTHLY) {
      data.date_from = yearDateFrom;
      data.date_to = yearDateTo;
    } else {
      data.year_from = yearDateFrom;
      data.year_to = yearDateTo;
    }
    const result = await this.session.post(this.#endpoint, data);
    return result;
  }
}

export default TaxReturn;
