import Resource from './resources';

/**
 * Retrieve tax returns information from a specific fiscal link.
 * @typedef { import("../types/apiResponses").taxReturnsResponse } Response
 * @extends Resource<Response>
 */
class TaxReturn extends Resource {
  #endpoint = 'api/tax-returns/'

    /** @private */
    resume() {}

  /**
   * Retrieve tax returns information from a specific fiscal link.
   *
   * @async
   * @param {string} link - UUID4 representation of a `link` Id.
   * @param {string} yearFrom - Required year from, format is `YYYY-MM-DD`
   * @param {string} yearTo - Required year to, format is `YYYY-MM-DD`.
   * @param {object} [options] - Optional parameters (`token`, `saveData`, `attachPDF`)
   * @param {string} [options.token] - The OTP token generated by the bank.
   * @param {boolean} [options.saveData] - Indicates whether or not to persist the data in Belvo. When set to `false`, the data won't be persisted.
   * @param {boolean} [options.attachPDF] - When this is set to `true`, you will receive the PDF as a binary string in the response.
   * @returns {Promise<Response>} Response
   * @throws {RequestError}
   */
  async retrieve(link, yearFrom, yearTo, options = {}) {
    const {
      token, encryptionKey, saveData, attachPDF,
    } = options;
    const result = await this.session.post(this.#endpoint, {
      link,
      token,
      year_from: yearFrom,
      year_to: yearTo,
      encryption_key: encryptionKey,
      save_data: saveData,
      attach_pdf: attachPDF,
    });
    return result;
  }
}

export default TaxReturn;
